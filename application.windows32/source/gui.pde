/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void ctrlWin_draw(PApplet appc, GWinData data) { //_CODE_:AnimationInput:454362:
  appc.background(230);
} //_CODE_:AnimationInput:454362:

public void controlsTextPane_change1(GTextArea source, GEvent event) { //_CODE_:controlsTextPane:655714:
  //println("textarea2 - GTextArea >> GEvent." + event + " @ " + millis());
} //_CODE_:controlsTextPane:655714:

public void addFrame_click1(GButton source, GEvent event) { //_CODE_:addFrame:561487:
  if(event == GEvent.CLICKED){
    
    //check if we need to instantiate animator or add a keyframe
    if(userAnimation == null){  //instaniate
    userAnimation = new animator(model.getJointTree());
    controlsTextPane.appendText("> model set as starting frame of animation");
    } 
    else {  //add keyFrame
      int userSetFrames = numberOfFrames_slider.getValueI();
      userAnimation.addKeyFrame(new keyFrame(model.getJointTree(), userSetFrames));
      controlsTextPane.appendText("> model set as key frame: " + userAnimation.getNumberOfKeyFrames() + " for " + userSetFrames + " frames");
    }
  }
} //_CODE_:addFrame:561487:

public void custom_slider1_change1(GCustomSlider source, GEvent event) { //_CODE_:numberOfFrames_slider:456456:
  
} //_CODE_:numberOfFrames_slider:456456:

public void playAnimation_click1(GButton source, GEvent event) { //_CODE_:playAnimation:726973:
  if(event == GEvent.CLICKED){
    if(userAnimation != null){
      if(userAnimation.getPlayStatus()){  //is already playing: pause
        userAnimation.pauseAnimation();
        controlsTextPane.appendText("> ...animation stoped");
      }
      else {  //is not playing: play
        int selectedFrame = (int)(playbackBar.getValueF() * (userAnimation.getNumberOfFrames()-1));
        if (selectedFrame == userAnimation.getNumberOfFrames()-1) {  //if user wants to play from final frame there is nothing to play, just start from 0
          selectedFrame = 0;
        }
        userAnimation.playFromFrame(selectedFrame);
        controlsTextPane.appendText("> playing from frame: " + selectedFrame);
      }
    }
    else{
      controlsTextPane.appendText("> Cannot play empty animation, try setting the initial frame");
    }
  }
} //_CODE_:playAnimation:726973:

public void playbackBar_slider1_change1(GCustomSlider source, GEvent event) { //_CODE_:playbackBar:267706:
  if(event == GEvent.VALUE_STEADY){
    if(userAnimation != null){
      joint selectedFrame = userAnimation.getFrame((int)(source.getValueF() * (userAnimation.getNumberOfFrames()-1)));
      model.setJointTree(selectedFrame);
    }
  }
} //_CODE_:playbackBar:267706:

public void playAnimationFromStart_click1(GButton source, GEvent event) { //_CODE_:playAnimationFromStart:267106:
  if(userAnimation != null){
    userAnimation.playFromFrame(0);
    controlsTextPane.appendText("> playing from frame: 0");
  }
  else{
    controlsTextPane.appendText("> Cannot play empty animation, try setting the initial frame");
  }
} //_CODE_:playAnimationFromStart:267106:

public void toggleLoop_click1(GButton source, GEvent event) { //_CODE_:toggleLoop:278655:
  if(event == GEvent.CLICKED && userAnimation != null){
    boolean status = userAnimation.toggleLooping();  //toggle the animation's loop status
    controlsTextPane.appendText("> looping set to: " + status);
  }
} //_CODE_:toggleLoop:278655:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.PURPLE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  AnimationInput = GWindow.getWindow(this, "controls", 0, 0, 400, 500, JAVA2D);
  AnimationInput.noLoop();
  AnimationInput.setActionOnClose(G4P.KEEP_OPEN);
  AnimationInput.addDrawHandler(this, "ctrlWin_draw");
  controlsTextPane = new GTextArea(AnimationInput, 12, 36, 372, 156, G4P.SCROLLBARS_VERTICAL_ONLY | G4P.SCROLLBARS_AUTOHIDE);
  controlsTextPane.setPromptText("animation log");
  controlsTextPane.setOpaque(true);
  controlsTextPane.addEventHandler(this, "controlsTextPane_change1");
  addFrame = new GButton(AnimationInput, 12, 312, 96, 30);
  addFrame.setText("set initial state");
  addFrame.addEventHandler(this, "addFrame_click1");
  numberOfFrames_slider = new GCustomSlider(AnimationInput, 12, 228, 372, 72, "grey_blue");
  numberOfFrames_slider.setShowValue(true);
  numberOfFrames_slider.setShowLimits(true);
  numberOfFrames_slider.setLimits(60, 1, 300);
  numberOfFrames_slider.setNbrTicks(6);
  numberOfFrames_slider.setShowTicks(true);
  numberOfFrames_slider.setNumberFormat(G4P.INTEGER, 0);
  numberOfFrames_slider.setOpaque(false);
  numberOfFrames_slider.addEventHandler(this, "custom_slider1_change1");
  label1 = new GLabel(AnimationInput, 12, 12, 139, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("animation console output");
  label1.setOpaque(false);
  playAnimation = new GButton(AnimationInput, 200, 400, 90, 30);
  playAnimation.setText("play");
  playAnimation.addEventHandler(this, "playAnimation_click1");
  label2 = new GLabel(AnimationInput, 12, 216, 144, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Set number of frames");
  label2.setOpaque(false);
  playbackBar = new GCustomSlider(AnimationInput, 12, 396, 372, 96, "grey_blue");
  playbackBar.setLimits(0.0, 0.0, 1.0);
  playbackBar.setNumberFormat(G4P.DECIMAL, 0);
  playbackBar.setOpaque(false);
  playbackBar.addEventHandler(this, "playbackBar_slider1_change1");
  label3 = new GLabel(AnimationInput, 12, 396, 80, 20);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("playback bar");
  label3.setOpaque(false);
  playAnimationFromStart = new GButton(AnimationInput, 100, 400, 90, 30);
  playAnimationFromStart.setText("play from start");
  playAnimationFromStart.addEventHandler(this, "playAnimationFromStart_click1");
  toggleLoop = new GButton(AnimationInput, 340, 400, 36, 30);
  toggleLoop.setText("loop");
  toggleLoop.addEventHandler(this, "toggleLoop_click1");
  AnimationInput.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow AnimationInput;
GTextArea controlsTextPane; 
GButton addFrame; 
GCustomSlider numberOfFrames_slider; 
GLabel label1; 
GButton playAnimation; 
GLabel label2; 
GCustomSlider playbackBar; 
GLabel label3; 
GButton playAnimationFromStart; 
GButton toggleLoop; 
